// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/server/metricCollector.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	dto "go-metric-svc/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DBPing mocks base method.
func (m *MockStorage) DBPing(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBPing", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBPing indicates an expected call of DBPing.
func (mr *MockStorageMockRecorder) DBPing(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBPing", reflect.TypeOf((*MockStorage)(nil).DBPing), ctx)
}

// GetAllMetrics mocks base method.
func (m *MockStorage) GetAllMetrics(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockStorageMockRecorder) GetAllMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockStorage)(nil).GetAllMetrics), ctx)
}

// GetMetricByName mocks base method.
func (m *MockStorage) GetMetricByName(metricName dto.MetricServiceDto, ctx context.Context) (dto.MetricServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricByName", metricName, ctx)
	ret0, _ := ret[0].(dto.MetricServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricByName indicates an expected call of GetMetricByName.
func (mr *MockStorageMockRecorder) GetMetricByName(metricName, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricByName", reflect.TypeOf((*MockStorage)(nil).GetMetricByName), metricName, ctx)
}

// SaveMetrics mocks base method.
func (m *MockStorage) SaveMetrics(ctx context.Context, metrics dto.MetricCollectionDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetrics indicates an expected call of SaveMetrics.
func (mr *MockStorageMockRecorder) SaveMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetrics", reflect.TypeOf((*MockStorage)(nil).SaveMetrics), ctx, metrics)
}

// SumValue mocks base method.
func (m *MockStorage) SumValue(metricName string, metricValue int64, ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumValue", metricName, metricValue, ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumValue indicates an expected call of SumValue.
func (mr *MockStorageMockRecorder) SumValue(metricName, metricValue, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumValue", reflect.TypeOf((*MockStorage)(nil).SumValue), metricName, metricValue, ctx)
}

// UpdateValue mocks base method.
func (m *MockStorage) UpdateValue(metricName string, metricValue float64, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValue", metricName, metricValue, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValue indicates an expected call of UpdateValue.
func (mr *MockStorageMockRecorder) UpdateValue(metricName, metricValue, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValue", reflect.TypeOf((*MockStorage)(nil).UpdateValue), metricName, metricValue, ctx)
}
