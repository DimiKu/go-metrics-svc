// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/metrics_handler.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	dto "go-metric-svc/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DbPing mocks base method.
func (m *MockService) DBPing(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBPing", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbPing indicates an expected call of DbPing.
func (mr *MockServiceMockRecorder) DbPing(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBPing", reflect.TypeOf((*MockService)(nil).DBPing), ctx)
}

// GetAllMetrics mocks base method.
func (m *MockService) GetAllMetrics() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockServiceMockRecorder) GetAllMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockService)(nil).GetAllMetrics))
}

// GetMetricByName mocks base method.
func (m *MockService) GetMetricByName(metric dto.MetricServiceDto) (dto.MetricServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricByName", metric)
	ret0, _ := ret[0].(dto.MetricServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricByName indicates an expected call of GetMetricByName.
func (mr *MockServiceMockRecorder) GetMetricByName(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricByName", reflect.TypeOf((*MockService)(nil).GetMetricByName), metric)
}

// SumInStorage mocks base method.
func (m *MockService) SumInStorage(metricName string, num int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumInStorage", metricName, num)
	ret0, _ := ret[0].(int64)
	return ret0
}

// SumInStorage indicates an expected call of SumInStorage.
func (mr *MockServiceMockRecorder) SumInStorage(metricName, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumInStorage", reflect.TypeOf((*MockService)(nil).SumInStorage), metricName, num)
}

// UpdateStorage mocks base method.
func (m *MockService) UpdateStorage(metricName string, num float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStorage", metricName, num)
}

// UpdateStorage indicates an expected call of UpdateStorage.
func (mr *MockServiceMockRecorder) UpdateStorage(metricName, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorage", reflect.TypeOf((*MockService)(nil).UpdateStorage), metricName, num)
}
